---
description: Workflow for creating a product requirement description (PRD)
globs: 
alwaysApply: false
---
# Create PRD Workflow

The user will provide a description of a new feature. Your job is to work with the user to do research and create a high-level PRD using language that is easy to understand for non-technical people.

The output will be a `./task-manager/[prd-title]/prd.md` file with the high-level PRD description and overview of product increments needed to implement the feature.

When approved, create a backlog item in [PRODUCT_MANAGEMENT_TOOL] (if configured) with the PRD as the description.

## Workflow

Follow the steps below to create the PRD.

1. Ensure `task-manager` git repository exists

   Before creating a PRD, run this script to ensure the `task-manager` directory exists, as a separate git repository.

   **For Unix/Mac:**
   ```bash
   [ -d ".git" ] || { echo "Error: Must run from repository root"; exit 1; }
   [ -d "task-manager" ] || (
     mkdir -p .git/info && echo "/task-manager/" >> .git/info/exclude &&
     mkdir task-manager && cd task-manager && git init -b main
   )
   ```

   **For Windows:**
   ```cmd
   if not exist .git (echo Error: Must run from repository root & exit /b 1)
   if not exist task-manager (
     mkdir .git\info 2>nul && echo /task-manager/ >> .git\info\exclude &&
     mkdir task-manager && cd task-manager && git init -b main
   )
   ```

  > **Note:** Adding `task-manager` to `.git/info/exclude` keeps it visible to editors while excluded from repository.

2. Research and understand the feature

   Conduct research for a feasible solution that takes the existing codebase and features into consideration. This includes:
   - Understanding the user's requirements and business context.
   - Investigating the current state and implementation in the codebase:
     - Specify which self-contained system (e.g., `account-management`, `back-office`) the feature belongs to.
     - Respect the multi-tenant nature: design features to work for one tenant by default, unless otherwise specified.
   - Using MCP tools or other methods for necessary information, best practices, or technologies.
   - Asking clarifying questions if any detail, edge case, or scope is unclear.

3. Create the PRD description

   Based on your research, create a `./task-manager/[prd-title]/prd.md` file containing the high-level PRD description. The `[prd-title]` should be a short, relevant title in kebab-case.

   When writing the PRD description:
   - Use sentence case for level-1 headers.
   - Stay at a high level—no implementation details or code examples.
   - Use correct domain terminology: multi-tenant, self-contained system, shared kernel, tenant, user, etc.
   - Specify which self-contained system(s) are in scope.
   - Avoid repetition.

4. Save and get approval of the PRD description

   Save the PRD description to `./task-manager/[prd-title]/prd.md` for user review. Present it to the user and iterate until approved before breaking down into product increments.

5. Create product increments overview

   A product increment is a small, independent, deployable unit of work that will typically equal a pull request. E.g., with CRUD for one new aggregate with domain model, commands, queries, database migration, and tests. Or a frontend to call CRUD operations. Often a PRD would require multiple product increments for multiple Aggregates, UI, etc. 

   To break down a PRD into product increments you must:

   - Research the codebase before defining product increments.
   - Make sure that each product increment implements a small but fully deployable and testable unit of work.
   - For larger features, implement small backend and frontend increments, instead of multiple backend increments followed by a frontend increment at the end.
   - Write a paragraph or two about what each product increment delivers and the features it contains.

   Update `./task-manager/[prd-title]/prd.md` to include a "## Product increments" section at the end.

6. Create a backlog item in [PRODUCT_MANAGEMENT_TOOL] (if configured)

   After final approval, use the [PRODUCT_MANAGEMENT_TOOL] MCP tool to create a backlog item named after the PRD with the markdown description.

## Example

Use this [Product requirement description example](mdc:.cursor/rules/workflows/samples/example-prd.md) as a template.

✅ DO:
- Follow the exact structure in the example PRD.
- Conduct deep research by reading code, consulting rule files, and using MCP tools or other research methods.
- Specify the self-contained system for the feature.
- Avoid touching `shared-kernel` or `shared-webapp` unless agreed.
- Respect multi-tenant design by default.
- Keep the PRD high level without code snippets.
- Save the PRD for review before approval.
- Use the [PRODUCT_MANAGEMENT_TOOL] MCP tool to create the backlog item after final PRD approval, with the full PRD description.
- Define product increments that are small, deployable pull requests.
- Create product increments that are small and can be independently deployed.

❌ DON'T:
- Add details other than description to product increments.
- Write PRDs as user stories—use the example structure.
- Include implementation details or code examples in the PRD.
- Skip research. Always understand the problem first.
- Ignore rule files.
- Repeat information across sections.
- Write titles in Title Case—use sentence case.
- Assume that tools like EF Core are used for database migrations. It's not, and such details should be left to the implementation step.
- Rename the file—must be `prd.md`.
- Delete the PRD file unless the backlog item was created successfully.
- Update the backlog item description differently from the approved PRD.
- Save questions in the PRD file. Always ask clarifying questions in chat.
- Create product increments that e.g. split tests, implementation, and migrations across separate product increments.

**SERIOUSLY:**  
Do the research. Read code and rule files. Ask questions. No shortcuts.
